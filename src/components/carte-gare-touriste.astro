---
---

<style>
  .select-couche {
    margin-bottom: 1rem;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    border: 1px solid #9d99c7;
    background: #f9f8ff;
    font-size: 1rem;
  }

  #plot-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: relative;
  }

  .legende {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.85);
    border: 1px solid #d0d0d0;
    border-radius: 6px;
    padding: 0.5rem 0.8rem;
    font-size: 0.9rem;
    color: #333;
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }

  .legende-item {
    display: flex;
    align-items: center;
    gap: 0.4rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .dot.gares {
    background: #54278f;
  }

  .dot.tourisme {
    background: #746ab0;
  }
</style>

<div id="plot-container">
  <select id="select-couche" class="select-couche">
    <option value="Toutes">Toutes</option>
    <option value="Gares">Gares</option>
    <option value="Tourisme">Tourisme</option>
  </select>
  <div id="map-plot"></div>

  <!-- Légende -->
  <div class="legende">
    <div class="legende-item"><span class="dot gares"></span> Gares</div>
    <div class="legende-item"><span class="dot tourisme"></span> Tourisme</div>
  </div>
</div>

<script type="module">
  import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
  import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

  const toNum = v => {
    if (v == null) return null;
    const n = typeof v === "number" ? v : parseFloat(String(v).replace(",", "."));
    return Number.isFinite(n) ? n : null;
  };

  function parseCoords(d) {
    // 1) direct fields
    let lat = toNum(d.Latitude ?? d.latitude ?? d.lat);
    let lon = toNum(d.Longitude ?? d.longitude ?? d.lon);

    // 2) geometry.coordinates (GeoJSON common: [lon, lat])
    if (lat === null || lon === null) {
      const coords =
        d.geometry?.coordinates ?? d.coordinates ?? d.coordonnees ?? d.coord;
      if (Array.isArray(coords) && coords.length >= 2) {
        const c0 = toNum(coords[0]);
        const c1 = toNum(coords[1]);
        // assume GeoJSON order [lon, lat]
        if (c0 !== null && c1 !== null) {
          lon = lon ?? c0;
          lat = lat ?? c1;
        }
      }
    }

    if (lat === null || lon === null) {
      const s =
        d.coordonnees_geo ??
        d["coordonnees_geo"] ??
        d.coordonnees_geo_string ??
        d.coord_str ??
        d.coord;
      if (typeof s === "string") {
        const str = s.trim();
        const pointMatch = str.match(/POINT\s*\(\s*([+-]?[0-9.,]+)\s+([+-]?[0-9.,]+)\s*\)/i);
        if (pointMatch) {
          const a = toNum(pointMatch[1]);
          const b = toNum(pointMatch[2]);
          if (a !== null && b !== null) {
            lon = lon ?? a;
            lat = lat ?? b;
          }
        } else if (str.includes(",")) {
          const [aStr, bStr] = str.split(",").map(s => s.trim());
          const a = toNum(aStr);
          const b = toNum(bStr);
          if (a !== null && b !== null) {
            const aIsLat = a >= -90 && a <= 90;
            const bIsLat = b >= -90 && b <= 90;
            const aIsLon = a >= -180 && a <= 180;
            const bIsLon = b >= -180 && b <= 180;
            if (aIsLat && bIsLon) {
              lat = lat ?? a;
              lon = lon ?? b;
            } else if (aIsLon && bIsLat) {
              lon = lon ?? a;
              lat = lat ?? b;
            } else {
              lat = lat ?? a;
              lon = lon ?? b;
            }
          }
        } else {
          const nums = Array.from(str.matchAll(/[+-]?[0-9]+(?:[.,][0-9]+)?/g)).map(m =>
            toNum(m[0].replace(",", "."))
          );
          if (nums.length >= 2) {
            const a = nums[0], b = nums[1];
            const aIsLat = a >= -90 && a <= 90;
            const bIsLat = b >= -90 && b <= 90;
            if (aIsLat && !bIsLat) {
              lat = lat ?? a;
              lon = lon ?? b;
            } else if (!aIsLat && bIsLat) {
              lon = lon ?? a;
              lat = lat ?? b;
            } else {
              lat = lat ?? a;
              lon = lon ?? b;
            }
          }
        }
      }
    }

    if (
      lat === null ||
      lon === null ||
      !(lat >= -90 && lat <= 90) ||
      !(lon >= -180 && lon <= 180)
    ) {
      return null;
    }

    return { lat, lon };
  }

  async function initCarte() {
    const [departements, gares, tourismes] = await Promise.all([
      fetch("/departements.geojson").then(r => r.json()),
      fetch("/gares-de-voyageurs.json").then(r => r.json()),
      fetch("/basilic-dataculture-2025-09-05.json").then(r => r.json())
    ]);

    const garesValides = gares.filter(
      d =>
        d.position_geographique &&
        d.position_geographique.lon != null &&
        d.position_geographique.lat != null
    );

    // Normalize / extract tourism coordinates robustly
    const tourismesNettoyes = tourismes
      .map(d => {
        const coords = parseCoords(d);
        if (!coords) return null;
        return {
          ...d,
          Latitude: coords.lat,
          Longitude: coords.lon,
          Nom: d.Nom ?? d.nom ?? d["Nom du site"] ?? d["Nom Site"] ?? "Inconnu"
        };
      })
      .filter(Boolean);

    // Filtrage des points situés en métropole
    const tourismesMetropole = tourismesNettoyes.filter(
      d =>
        d.Longitude > -6 &&
        d.Longitude < 10 &&
        d.Latitude > 41 &&
        d.Latitude < 52
    );

    console.log("Nombre de points tourisme (nettoyés) :", tourismesNettoyes.length);
    console.log("Nombre de points tourisme (métropole) :", tourismesMetropole.length);

    const container = document.getElementById("map-plot");
    const select = document.getElementById("select-couche");

    function renderCarte(couche) {
      container.innerHTML = "";
      const chart = Plot.plot({
        width: 1000,
        projection: { type: "mercator", domain: departements },
        marks: [
          // 🗺️ Fond de carte
          Plot.geo(departements, { fill: "#f2f0f7", stroke: "#9d99c7" }),

          // 🚉 Points gares
          ...((couche === "Toutes" || couche === "Gares")
            ? [
                Plot.dot(garesValides, {
                  x: d => d.position_geographique.lon,
                  y: d => d.position_geographique.lat,
                  r: 3,
                  fill: "#54278f",
                  opacity: 1,
                  title: d => `Gare : ${d.nom}`
                })
              ]
            : []),

          // 🏛️ Points tourisme
          ...((couche === "Toutes" || couche === "Tourisme")
            ? [
                Plot.dot(tourismesMetropole, {
                  x: d => +d.Longitude,
                  y: d => +d.Latitude,
                  r: 1.3,
                  fill: "#746ab0",
                  opacity: 0.4,
                  title: d => `Lieu touristique : ${d.Nom ?? "Inconnu"}`
                })
              ]
            : [])
        ]
      });
      container.append(chart);
    }

    // Premier rendu + interaction
    renderCarte("Toutes");
    select.addEventListener("change", e => renderCarte(e.target.value));
  }

  initCarte();
</script>
